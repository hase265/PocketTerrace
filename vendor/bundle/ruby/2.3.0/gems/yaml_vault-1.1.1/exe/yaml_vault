#!/usr/bin/env ruby

require 'yaml_vault'
require 'active_support/core_ext'
require 'thor'

class YamlVault::Cli < Thor
  include Thor::Actions

  class_option :key, aliases: "-k", type: :string, banner: "KEYNAME (format: \"KEY1.INNER_KEY,KEY2\")", desc: "target key", default: "$"
  class_option :cryptor, type: :string, enum: %w(simple aws-kms gcp-kms), default: "simple"

  class_option :salt, aliases: "-s", type: :string
  class_option :cipher, type: :string, desc: "Encrypt cipher (see. OpenSSL::Cipher.ciphers)", default: "aes-256-cbc"
  class_option :key_len, type: :numeric, desc: "key length of cipher", default: 32
  class_option :digest, type: :string, desc: "Sign digest algorithm (see. OpenSSL::Digest.constants)", default: "SHA256"
  class_option :signature_key_len, type: :numeric, desc: "key length of signature", default: 64
  class_option :use_sign_passphrase, type: :boolean, default: false

  class_option :aws_kms_key_id, type: :string
  class_option :aws_region, type: :string
  class_option :aws_access_key_id, type: :string
  class_option :aws_secret_access_key, type: :string
  class_option :aws_profile, type: :string

  class_option :gcp_kms_resource_id, type: :string
  class_option :gcp_credential_file, type: :string

  desc "encrypt YAML_FILE", "Encrypt yaml file"
  method_option :output, aliases: "-o", type: :string, required: true
  def encrypt(yaml_file)
    passphrase, sign_passphrase = get_passphrase
    encrypted_yaml = YamlVault::Main.from_file(
      yaml_file,
      target_keys,
      options[:cryptor],
      passphrase: passphrase,
      sign_passphrase: sign_passphrase,
      salt: options[:salt], cipher: options[:cipher], key_len: options[:key_len],
      digest: options[:digest], signature_key_len: options[:signature_key_len],
      aws_kms_key_id: options[:aws_kms_key_id],
      aws_region: options[:aws_region],
      aws_access_key_id: options[:aws_access_key_id],
      aws_secret_access_key: options[:aws_secret_access_key],
      aws_profile: options[:aws_profile],
      gcp_kms_resource_id: options[:gcp_kms_resource_id],
      gcp_credential_file: options[:gcp_credential_file]
    ).encrypt_yaml
    puts "encrypted #{yaml_file} -> #{options[:output]}"
    File.open(options[:output], "w") { |f| f.write encrypted_yaml }
  end

  desc "decrypt YAML_FILE", "Decrypt yaml file"
  method_option :output, aliases: "-o", type: :string, required: true
  def decrypt(yaml_file)
    passphrase, sign_passphrase = get_passphrase
    decrypted_yaml = YamlVault::Main.from_file(
      yaml_file,
      target_keys,
      options[:cryptor],
      passphrase: passphrase,
      sign_passphrase: sign_passphrase,
      salt: options[:salt], cipher: options[:cipher], digest: options[:digest],
      aws_kms_key_id: options[:aws_kms_key_id],
      aws_region: options[:aws_region],
      aws_access_key_id: options[:aws_access_key_id],
      aws_secret_access_key: options[:aws_secret_access_key],
      aws_profile: options[:aws_profile],
      gcp_kms_resource_id: options[:gcp_kms_resource_id],
      gcp_credential_file: options[:gcp_credential_file]
    ).decrypt_yaml
    puts "decrypted #{yaml_file} -> #{options[:output]}"
    File.open(options[:output], "w") { |f| f.write decrypted_yaml }
  end

  private

  def get_passphrase
    return nil, nil unless options[:cryptor] == "simple"

    passphrase = ENV["YAML_VAULT_PASSPHRASE"] || ask("Enter passphrase:", echo: false)
    puts "\n"
    if ENV["YAML_VAULT_SIGN_PASSPHRASE"]
      sign_passphrase = ENV["YAML_VAULT_SIGN_PASSPHRASE"]
    elsif options[:use_sign_passphrase]
      sign_passphrase = ask("Enter sign passphrase:", echo: false)
      puts "\n"
    else
      sign_passphrase = nil
    end

    raise "Please input passphrase" if passphrase.blank?

    return passphrase, sign_passphrase
  end

  def target_keys
    if options[:key]
      options[:key].split(/,\s?/).map do |k|
        YamlVault::KeyParser.parse(k)
      end
    else
      [["$"]]
    end
  end
end

YamlVault::Cli.start
